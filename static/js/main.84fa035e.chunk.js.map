{"version":3,"sources":["components/Header.tsx","components/List.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","props","useState","value","setValue","addUndoItem","className","placeholder","data-testid","onChange","e","target","onKeyUp","key","List","list","changeStatus","handleBlur","valueChange","deleteItem","length","map","item","index","onClick","status","onBlur","stopPropagation","App","undoList","setUndoList","useEffect","axios","get","then","res","data","catch","newList","splice","listIndex","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"uRAmCeA,EA7BmB,SAACC,GAAW,IAAD,EACjBC,mBAAS,IADQ,mBACpCC,EADoC,KAC7BC,EAD6B,KAEnCC,EAAgBJ,EAAhBI,YAQR,OACE,6BACE,yBAAKC,UAAU,UACb,yBAAKA,UAAU,kBAAf,WAEE,2BACEC,YAAY,WACZD,UAAU,eACVE,cAAY,eACZL,MAAOA,EACPM,SAAU,SAACC,GAAD,OAAON,EAASM,EAAEC,OAAOR,QACnCS,QAjBe,SAACF,GACV,UAAVA,EAAEG,KAAmBV,IACvBE,EAAYF,GACZC,EAAS,YCmDAU,EAjDe,SAACb,GAAW,IAChCc,EAA4Dd,EAA5Dc,KAAMC,EAAsDf,EAAtDe,aAAcC,EAAwChB,EAAxCgB,WAAYC,EAA4BjB,EAA5BiB,YAAaC,EAAelB,EAAfkB,WAErD,OACE,yBAAKb,UAAU,aACb,yBAAKA,UAAU,mBAAf,aAEE,yBAAKE,cAAY,QAAQF,UAAU,mBAChCS,EAAKK,SAGV,wBAAId,UAAU,qBACXS,EAAKM,KAAI,SAACC,EAAMC,GACf,OACE,wBACEjB,UAAU,iBACVE,cAAY,YACZK,IAAKU,EACLC,QAAS,kBAAMR,EAAaO,KAEX,QAAhBD,EAAKG,OACJH,EAAKnB,MAEL,2BACEG,UAAU,kBACVE,cAAY,QACZL,MAAOmB,EAAKnB,MACZuB,OAAQ,kBAAMT,EAAWM,IACzBd,SAAU,SAACC,GAAD,OAAOQ,EAAYK,EAAOb,EAAEC,OAAOR,UAGjD,yBACEG,UAAU,mBACVE,cAAY,cACZgB,QAAS,SAACd,GACRA,EAAEiB,kBACFR,EAAWI,KALf,Y,MC8CCK,MArFf,WAAgB,IAAD,EACmB1B,mBAAS,IAD5B,mBACN2B,EADM,KACIC,EADJ,KAuEb,OApEAC,qBAAU,WACRC,IACGC,IAAI,mBACJC,MAAK,SAACC,GACLL,EAAYK,EAAIC,KAAKA,SAEtBC,OAAM,SAAC3B,SACT,IA8DD,6BACE,kBAAC,EAAD,CAAQL,YAnBQ,SAACF,GACnB,IAAMmC,EAAO,sBACRT,GADQ,CAEX,CACEJ,OAAQ,MACRtB,WAGJ2B,EAAYQ,MAYV,kBAAC,EAAD,CACEvB,KAAMc,EACNV,WAXa,SAACI,GAClB,IAAMe,EAAO,YAAOT,GACpBS,EAAQC,OAAOhB,EAAO,GACtBO,EAAYQ,IASRtB,aAvCe,SAACO,GACpB,IAAMe,EAAUT,EAASR,KAAI,SAACC,EAAMkB,GAClC,OAAIjB,IAAUiB,EACL,2BACFlB,GADL,IAEEG,OAAQ,UAGL,2BACFH,GADL,IAEEG,OAAQ,WAGZK,EAAYQ,IA2BRrB,WArDa,SAACM,GAClB,IAAMe,EAAUT,EAASR,KAAI,SAACC,EAAMkB,GAClC,OAAIjB,IAAUiB,EACL,2BACFlB,GADL,IAEEG,OAAQ,QAGLH,KAETQ,EAAYQ,IA4CRpB,YAnEc,SAACK,EAAepB,GAClC,IAAMmC,EAAUT,EAASR,KAAI,SAACC,EAAMkB,GAClC,OAAIjB,IAAUiB,EACL,2BACFlB,GADL,IAEEnB,UAGGmB,KAETQ,EAAYQ,QCjBIG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdlB,OAAM,SAAAmB,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.84fa035e.chunk.js","sourcesContent":["import React, { useState } from 'react'\n\ninterface IHeader {\n  addUndoItem: (value: string) => void;\n}\n\nconst Header: React.FC<IHeader> = (props) => {\n  const [value, setValue] = useState('');\n  const { addUndoItem } = props;\n\n  const handleInputKeyUp = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\" && value) {\n      addUndoItem(value);\n      setValue('');\n    }\n  };\n  return (\n    <div>\n      <div className=\"header\">\n        <div className=\"header-content\">\n          TodoList\n          <input\n            placeholder=\"Add Todo\"\n            className=\"header-input\"\n            data-testid=\"header-input\"\n            value={value}\n            onChange={(e) => setValue(e.target.value)}\n            onKeyUp={handleInputKeyUp}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Header;\n","import React from 'react';\n\ntype TListItem = {\n  status: 'div' | 'input';\n  value: string;\n};\n\nexport interface IList {\n  list: TListItem[];\n  deleteItem: (index: number) => void;\n  changeStatus: (index: number) => void;\n  handleBlur: (index: number) => void;\n  valueChange: (index: number, value: string) => void;\n}\n\nconst List: React.FC<IList> = (props) => {\n  const { list, changeStatus, handleBlur, valueChange, deleteItem } = props;\n\n  return (\n    <div className=\"undo-list\">\n      <div className=\"undo-list-title\">\n        In progess\n        <div data-testid=\"count\" className=\"undo-list-count\">\n          {list.length}\n        </div>\n      </div>\n      <ul className=\"undo-list-content\">\n        {list.map((item, index) => {\n          return (\n            <li\n              className=\"undo-list-item\"\n              data-testid=\"list-item\"\n              key={index}\n              onClick={() => changeStatus(index)}\n            >\n              {item.status === 'div' ? (\n                item.value\n              ) : (\n                <input\n                  className=\"undo-list-input\"\n                  data-testid=\"input\"\n                  value={item.value}\n                  onBlur={() => handleBlur(index)}\n                  onChange={(e) => valueChange(index, e.target.value)}\n                />\n              )}\n              <div\n                className=\"undo-list-delete\"\n                data-testid=\"delete-item\"\n                onClick={(e) => {\n                  e.stopPropagation();\n                  deleteItem(index);\n                }}\n              >\n                -\n              </div>\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n};\n\nexport default List;\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Header from './components/Header';\nimport UndoList from './components/List';\n\nimport './App.css';\n\nfunction App() {\n  const [undoList, setUndoList] = useState([]);\n\n  useEffect(() => {\n    axios\n      .get('./undoList.json')\n      .then((res) => {\n        setUndoList(res.data.data);\n      })\n      .catch((e) => {});\n  }, []);\n\n  const valueChange = (index: number, value: string) => {\n    const newList = undoList.map((item, listIndex) => {\n      if (index === listIndex) {\n        return {\n          ...item,\n          value\n        };\n      }\n      return item;\n    });\n    setUndoList(newList);\n  };\n\n  const handleBlur = (index: number) => {\n    const newList = undoList.map((item, listIndex) => {\n      if (index === listIndex) {\n        return {\n          ...item,\n          status: 'div'\n        };\n      }\n      return item;\n    });\n    setUndoList(newList);\n  };\n\n  const changeStatus = (index: number) => {\n    const newList = undoList.map((item, listIndex) => {\n      if (index === listIndex) {\n        return {\n          ...item,\n          status: 'input'\n        };\n      }\n      return {\n        ...item,\n        status: 'div'\n      };\n    });\n    setUndoList(newList);\n  };\n\n  const addUndoItem = (value: string) => {\n    const newList = [\n      ...undoList,\n      {\n        status: 'div',\n        value\n      }\n    ];\n    setUndoList(newList);\n  };\n\n  const deleteItem = (index: number) => {\n    const newList = [...undoList];\n    newList.splice(index, 1);\n    setUndoList(newList);\n  };\n\n  return (\n    <div>\n      <Header addUndoItem={addUndoItem} />\n      <UndoList\n        list={undoList}\n        deleteItem={deleteItem}\n        changeStatus={changeStatus}\n        handleBlur={handleBlur}\n        valueChange={valueChange}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}